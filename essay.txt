LINK: https://github.com/ileskaa/csb-project-1
To set up the project, please refer to the instructions in the repository's README.
Please note that within this essay, the $ sign is used to mark commands that should be run in your terminal, and >>> means that the command is to be run in the django shell. These should not be included as part of the commands. 

Now, to set up the database, run
$ sqlite3 db.sqlite3 < dump.sql


FLAW 1: Broken Access Control
The admin site can currently easily be accessed by some unintended users. If you're running the app on the default port, you can access the admin site at http://localhost:8000/admin/. A superuser has been created with an unsafe username/password combination. As it stands, the admin page can be accessed by simply using "admin" as both username and password. Please try it out!
We can probably agree that this is broken access control. Now to fix this issue, the first step is to delete this unsafe admin account. To do so, enter the django shell by using
$ python manage.py shell
and then from the shell run the following commands:
>>> from django.contrib.auth.models import User
>>> User.objects.get(username="admin", is_superuser=True).delete()

Now, to verify that the user has been deleted, run the following from the django shell:
User.objects.filter(is_superuser=True)
If the returned QuerySet is empty, or if it at least doesn't contain any user named "admin", it means the broken superuser account was successfully deleted.

Now, to create a new admin, exit the Django shell using ctrl+z, and then, at the root directory of this project, run
$ python manage.py createsuperuser
then enter a username of your choice. The email address prompt can be left empty. And when asked for a password, enter one that is at least 8 characters long. It should also be different from the username, and common passwords like "12345678" should not be used. After that, your new superuser will be created. And now, the admin site should be way harder to access by any undesired person.


FLAW 2: Cross-Site Request Forgery (CSRF)
CSRF refers to an attack that forces an authenticated user to perform some action on the platform on which he is authenticated.

To list all users:
>>> from django.contrib.auth.models import User
>>> User.objects.all()

One of the flaws of this app is that it doesn't block CSRF. To test this out, make sure the app is running on port 8000 of your machine, the open a page at
http://localhost:8000/brokenapp/1/results/. There you should see the vote counts for different answers. On a well-designed app, you should be able to alter these counts only by voting in the app. But here, a malicious actor could actually make you vote by making you click on a click. To test this out, open another tab at
https://ileskaa.github.io/csrf-demo/. This page presents you a link. If you click it, then go back to http://localhost:8000/brokenapp/1/results/, and refresh the page, you should see that the vote count for "Just hacking" increased by one. That was CSRF in action.

The cause of this flaw can be found at https://github.com/ileskaa/csb-project-1/blob/master/brokenapp/views.py#L60 and thankfully, it is really easy to fix. Juste remove line 60 of brokenapp/views.py.


FLAW 3: Cryptographic Failures
The cryptography used to protect passwords is currently totally broken. In fact, the hashing is non-existent. To the test this out, start the development server on port 8000, and open http://localhost:8000/. Click the register button, and enter a username and password of your choice. Then submit the form.
Now, in a terminal, run
$ python manage.py shell
to open the django shell.
From there, we want to retrieve the password corresponding to the username you used in the registration form. To do run
>>> from django.contrib.auth.models import User
>>> u = User.objects.get(username__exact=username)
>>> u.password
If you correctly passed your username to User.objects.get(), you should see your password displayed in plain text. No hashing whatsoever. This sucks because it leaves the passwords totally exposed in case of a breach.
The cause of this flaw can be found here:
https://github.com/ileskaa/csb-project-1/blob/master/csbproject1/settings.py#L142
Luckily, this is easy to fix. Open csbproject1/settings.py and simply remove line 142. Now if you go to http://localhost:8000/ and register with a different username, the password of that new user will be hashed. Test it out from the django shell, as we did earlier!

FLAW 4:

FLAW 5: