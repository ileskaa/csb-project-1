LINK: https://github.com/ileskaa/csb-project-1
To set up the project, please refer to the instructions in the repository's README.

Note: within this essay, the $ sign is used to mark commands that should be run in your terminal, and >>> means that the command is to be run in the django shell. These should not be included as part of the commands. 


FLAW 1: Identification and Authentication Failures
Common Weakness Enumeration (CWE) 521: Weak Password Requirements

The cause of the flaw is the function that starts here:
https://github.com/ileskaa/csb-project-1/blob/master/csbproject1/views.py#L50

This app does not have any password requirements at the moment. A new user can register with a password consisting of a single character if he so wishes. To fix this security hazard, some password requirements are needed. A solution to this issue has been implemented in csbproject1/views.py, but is currently commented out. To activate password validity checks, uncomment lines 56-58 within csbproject1/views.py.


FLAW 2: Cross-Site Request Forgery (CSRF)
CWE-352: Cross-Site Request Forgery (CSRF)

The cause of this flaw can be found at https://github.com/ileskaa/csb-project-1/blob/master/brokenapp/views.py#L83

CSRF refers to an attack that forces an authenticated user to perform some action on the platform on which he is authenticated, and one of the flaws of this app is that it currently does not block this type of attack. To test this out, make sure the app is running on port 8000 of your machine, then log in or register a new user if you don't already have one.
After that, open http://localhost:8000/brokenapp/1/results/. There you should see vote counts for different answers. On a well-designed app, you should be able to alter these counts only by voting in the app. But here, a malicious actor could actually force a vote by making you click on a click. To test this out, take note of how many votes the answer "Just hacking" has. Then open another tab at https://ileskaa.github.io/csrf-demo/. This page presents you a link. If you click it, then go back to http://localhost:8000/brokenapp/1/results/, and refresh the page, you should see that the vote count for "Just hacking" increased by one. That was CSRF in action.

To fix this, we must enable the currently disabled CSRF protection. To do so, remove line 83 of brokenapp/views.py.


FLAW 3: Cryptographic Failures
CWE-327: Use of a Broken or Risky Cryptographic Algorithm
The cause of this flaw can be found here:
https://github.com/ileskaa/csb-project-1/blob/master/csbproject1/settings.py#L145

The cryptography used to protect passwords is currently broken. In fact, the hashing is non-existent. To the test this out, make sure the development server is running on port 8000, and open http://localhost:8000/. Click the register button, and enter a username and password of your choice. Then submit the form.
Now, in a terminal, run
$ python manage.py shell
to open the django shell.
From there, we want to retrieve the password corresponding to the username you used in the registration form. To do so, run
>>> from django.contrib.auth.models import User
>>> u = User.objects.get(username__exact='your_username')
>>> u.password
If you correctly passed your username to User.objects.get(), you should see your password displayed in plain text, preceded by "custom$$". No hashing whatsoever. This is pretty bad, because it leaves the passwords totally exposed in case of a breach.

Now, here's how to to fix that. Open csbproject1/settings.py and remove line 145. After that, uncomment one or several of the hashers proposed below that. If several hashers are uncommented, the app will use the first one available, while the others will serve as fallbacks.
Now if you go to http://localhost:8000/ and register with a different username, the password of that new user will be hashed. Test it out from the django shell, as we did earlier!


FLAW 4: Injection
CWE-80: Improper Neutralization of Script-Related HTML Tags in a Web Page (Basic XSS)

The cause of the flaw is the function defined here:
https://github.com/ileskaa/csb-project-1/blob/master/brokenapp/views.py#L119

Make sure the app is running on port 8000 and that you are logged in. Now open http://localhost:8000/brokenapp/message/ in your browser. You'll be presented with a form that allows you to send messages that will then be displayed on the web page. The issue is that the server does not sanitize the issue messages, which enables you to run scripts. You can test this out by pasting
<script>alert("Just hacking")</script>
into the input field.
To prevent this type of injection, open the file brokenapp/views.py. Then uncomment line 137 and remove line 135. By using django's render function, all the inputs will be sanitized, which fixes the problem.


FLAW 5: Security Misconfiguration
CWE-547: Use of Hard-coded, Security-relevant Constants

The problematic line can be found at:
https://github.com/ileskaa/csb-project-1/blob/master/csbproject1/settings.py#L26

Instead of using a hard-coded variable, you should pass the secret key using an environment variable. Therefore, start by creating a file named `.env` at the root of the cloned directory. Add your secret key to that file in the format
```
SECRET_KEY=your-secret-key
```
Then, in `csbproject1/settings.py`, uncomment line 28 to enable the SECRET_KEY variable to be set based on the environment variable of the same name. After that, be sure to remove line 26 so that the hard coded constant is no longer present.


Voil√† ! Thank you for tagging along.